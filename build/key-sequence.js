// Generated by CoffeeScript 1.8.0
(function() {
  var KeyKit, KeySequence, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  _ = require('underscore-plus');

  KeyKit = require('./keykit');

  module.exports = KeySequence = (function() {
    KeySequence.prototype.callbackReference = null;

    KeySequence.prototype.keys = null;

    KeySequence.prototype.running = null;

    function KeySequence(sequence) {
      this.execute = __bind(this.execute, this);
      this.keys = KeyKit.getKeystrokes(sequence);
      this.running = false;
    }

    KeySequence.prototype.execute = function(event) {
      if (this.running) {
        event.abortKeyBinding();
        return;
      }
      this.running = true;
      event.preventDefault();
      event.stopImmediatePropagation();
      _.each(this.keys, this.trigger.bind(this));
      return this.running = false;
    };

    KeySequence.prototype.trigger = function(key) {
      var canceled, downEvent, _base;
      downEvent = KeyKit.createKBEvent('keydown', key);
      canceled = !this.dispatch(downEvent);
      if (KeyKit.isPrintable(key.code)) {
        this.dispatch(KeyKit.createKBEvent('keypress', key));
      }
      if (!canceled) {
        if (this.dispatch(KeyKit.createTextEvent(key))) {
          if (typeof (_base = document.activeElement).getModel === "function") {
            _base.getModel().insertText(key.char);
          }
        }
      }
      return this.dispatch(KeyKit.createKBEvent('keyup', key));
    };

    KeySequence.prototype.getCallback = function() {
      if (this.callbackReference == null) {
        this.callbackReference = this.execute.bind(this);
      }
      return this.callbackReference;
    };

    KeySequence.prototype.dispatch = function(event) {
      return document.activeElement.dispatchEvent(event);
    };

    return KeySequence;

  })();

}).call(this);
